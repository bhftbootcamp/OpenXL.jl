var documenterSearchIndex = {"docs":
[{"location":"#OpenXL.jl","page":"Home","title":"OpenXL.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OpenXL is a lightweight package designed to easily read Excel 2010 xlsx/xlsm/xltx/xltm files.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install OpenXL, simply use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add OpenXL","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here is how you can use the basic interface for parsing and printing XL tables:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OpenXL\n\njulia> raw_xlsx = xl_sample_ticker24h_xlsx()\n266033-element Vector{UInt8}:\n 0x50\n 0x4b\n    ⋮\n 0x00\n\njulia> xlsx = xl_parse(raw_xlsx)\n1-element XLWorkbook:\n 2682x19 XLSheet(\"Ticker24h\")\n\njulia> sheet = xlsx[\"Ticker24h\"]\n2682x19 XLSheet(\"Ticker24h\")\n Sheet │ A         B          C         ⋯  Q           R             S                 \n───────┼──────────────────────────────────────────────────────────────────────────────\n     1 │ \"symbol\"  \"askPrice\" \"askQty\"  ⋯  \"count\"     \"volume\"      \"weightedAvgPri…  \n     2 │ \"ETHBTC\"  0.05       8.11      ⋯  473,424.00  86,904.90     0.05              \n     3 │ \"LTCBTC\"  0.00       308.76    ⋯  43,966.00   130,937.57    0.00              \n     4 │ \"BNBBTC\"  0.01       1.04      ⋯  277,360.00  99,484.88     0.01              \n     ⋮ │  ⋮         ⋮          ⋮         ⋯   ⋮           ⋮             ⋮                 \n  2681 │ \"ZKUSDC\"  0.14       3,612.70  ⋯  1,572.00    1,389,551.60  0.15              \n  2682 │ \"ZROUSDC\" 2.92       437.83    ⋯  7,957.00    356,187.29    3.08        ","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can slice a table using address indexing and then convert the data to a row representation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OpenXL\n\njulia> xlsx = xl_parse(xl_sample_ticker24h_xlsx())\n1-element XLWorkbook:\n 2682x19 XLSheet(\"Ticker24h\")\n\njulia> sheet = xlsx[\"Ticker24h\"][\"A1:E\"]\n2682x5 SubXLSheet(\"Ticker24h\")\n Sheet │ A          B           C         D           E          \n───────┼────────────────────────────────────────────────────────\n     1 │ \"symbol\"   \"askPrice\"  \"askQty\"  \"bidPrice\"  \"bidQty\"   \n     2 │ \"ETHBTC\"   0.05        8.11      0.05        50.57      \n     3 │ \"LTCBTC\"   0.00        308.76    0.00        1,433.70   \n     4 │ \"BNBBTC\"   0.01        1.04      0.01        8.14       \n     ⋮ │  ⋮          ⋮            ⋮         ⋮           ⋮          \n  2681 │ \"ZKUSDC\"   0.14        3,612.70  0.14        11,976.90  \n  2682 │ \"ZROUSDC\"  2.92        437.83    2.92        353.73     \n\njulia> xl_rowtable(sheet; header = true)\n2681-element Vector{NamedTuple{(:symbol, :askPrice, :askQty, :bidPrice, :bidQty)}}:\n (symbol = \"ETHBTC\", askPrice = 0.05296, askQty = 8.1061, ...)\n (symbol = \"LTCBTC\", askPrice = 0.001072, askQty = 308.762, ...)\n (symbol = \"BNBBTC\", askPrice = 0.008633, askQty = 1.036, ...)\n (symbol = \"NEOBTC\", askPrice = 0.0001604, askQty = 6.52, ...)\n ⋮\n (symbol = \"ZKUSDC\", askPrice = 0.1386, askQty = 3612.7, ...)\n (symbol = \"ZROUSDC\", askPrice = 2.925, askQty = 437.83, ...)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Table slices can be obtained in the same way as with a regular matrix, which can then also be converted to a column representation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OpenXL\n\njulia> xlsx = xl_parse(xl_sample_ticker24h_xlsx())\n1-element XLWorkbook:\n 2682x19 XLSheet(\"Ticker24h\")\n\njulia> sheet = xlsx[\"Ticker24h\"][2:500, 7:10]\n499x4 SubXLSheet(\"Ticker24h\")\n Sheet │ A     B     C     D     \n───────┼────────────────────────\n     1 │ 0.05  0.06  0.05  0.05  \n     2 │ 0.00  0.00  0.00  0.00  \n     3 │ 0.01  0.01  0.01  0.01  \n     4 │ 0.00  0.00  0.00  0.00  \n     ⋮ │ ⋮     ⋮     ⋮     ⋮     \n   498 │ 0.00  0.00  0.00  0.00  \n   499 │ 0.00  0.00  0.00  0.00  \n\njulia> xl_columntable(sheet; alt_keys = Dict(\"A\" => \"O\", \"B\" => \"H\", \"C\" => \"L\", \"D\" => \"C\"))\n(\n  O = XLCell[0.05477, 0.001197  …  0.000968, 8.86e-6],\n  H = XLCell[0.05501, 0.001213  …  0.00098, 8.98e-6],\n  L = XLCell[0.05216, 0.001029  …  0.00091, 7.85e-6],\n  C = XLCell[0.05295, 0.001071  …  0.000932, 8.06e-6],\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"If necessary, you can make a DataFrame object using a row representation of the table.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OpenXL\nusing DataFrames\n\njulia> xlsx = xl_parse(xl_sample_ticker24h_xlsx())\n1-element XLWorkbook:\n 2682x19 XLSheet(\"Ticker24h\")\n\njulia> DataFrame(eachrow(xlsx[\"Ticker24h\"], header = true))\n2681×19 DataFrame\n  Row │ symbol      askPrice       askQty       bidPrice       bidQty      ⋯\n      │ String      Float64        Float64      Float64        Float64     ⋯\n──────┼─────────────────────────────────────────────────────────────────────\n    1 │ ETHBTC          0.05296        8.1061       0.05295       50.5655  ⋯\n    2 │ LTCBTC          0.001072     308.762        0.001071    1433.7\n    3 │ BNBBTC          0.008633       1.036        0.008632       8.139\n    4 │ NEOBTC          0.0001604      6.52         0.0001601    318.15\n    5 │ QTUMETH         0.000696     100.3          0.000692     792.4     ⋯\n    6 │ EOSETH          0.0001566    734.2          0.0001563   3401.2\n  ⋮   │     ⋮             ⋮             ⋮             ⋮             ⋮      ⋱\n 2676 │ ZROTRY         96.89           0.07        96.79         173.58\n 2677 │ LISTABRL        2.954         62.1          2.574       8013.9\n 2678 │ BAKETRY         6.72        3641.0          6.71        3071.0     ⋯\n 2679 │ WIFBRL          9.59          15.4          8.81        1595.9\n 2680 │ ZKUSDC          0.1386      3612.7          0.138      11976.9\n 2681 │ ZROUSDC         2.925        437.83         2.922        353.73\n                                            14 columns and 2669 rows omitted","category":"page"},{"location":"pages/api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"xl_parse\nxl_open","category":"page"},{"location":"pages/api_reference/#OpenXL.xl_parse","page":"API Reference","title":"OpenXL.xl_parse","text":"xl_parse(x::AbstractString) -> XLWorkbook\nxl_parse(x::Vector{UInt8}) -> XLWorkbook\n\nParse Excel file into XLWorkbook object.\n\nExamples\n\njulia> raw_xlsx = xl_sample_employee_xlsx()\n77626-element Vector{UInt8}:\n 0x50\n 0x4b\n    ⋮\n 0x00\n\njulia> xl_parse(raw_xlsx)\n1-element XLWorkbook:\n 1001x13 XLSheet(\"Employee\")\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#OpenXL.xl_open","page":"API Reference","title":"OpenXL.xl_open","text":"xl_open(file::AbstractString) -> XLWorkbook\n\nRead the specified XL file and parse it into XLWorkbook.\n\n\n\n\n\nxl_open(io::IO) -> XLWorkbook\n\nRead data from the specified IO object and parse it into an XLWorkbook.\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"XLWorkbook\nOpenXL.AbstractXLSheet\nXLSheet\nSubXLSheet\nOpenXL.AbstractXLCell\nXLCell","category":"page"},{"location":"pages/api_reference/#OpenXL.XLWorkbook","page":"API Reference","title":"OpenXL.XLWorkbook","text":"XLWorkbook <: AbstractVector{XLSheet}\n\nRepresents an Excel workbook containing XLSheet.\n\nFields\n\nsheets::Vector{XLSheet}: Workbook sheets.\n\nAccessors\n\nxl_sheetnames(x::XLWorkbook): Workbook sheet names.\n\nSee also: xl_parse.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#OpenXL.AbstractXLSheet","page":"API Reference","title":"OpenXL.AbstractXLSheet","text":"AbstractXLSheet <: AbstractArray{Any,2}\n\nAbstract supertype for XLSheet and SubXLSheet.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#OpenXL.XLSheet","page":"API Reference","title":"OpenXL.XLSheet","text":"XLSheet <: AbstractXLSheet\n\nSheet of the XLWorkbook. Supports indexing like a regular Matrix, as well as address indexing (e.g. A, A1, AB3 or range D:E, B1:C10, etc.).\n\nThe sheet slice will be converted into a SubXLSheet.\n\nFields\n\nname::String: Sheet name.\ntable::Matrix: Table representation.\n\nAccessors\n\nxl_sheetname(x::XLSheet): Sheet name.\nxl_nrow(x::XLSheet): Number of rows.\nxl_ncol(x::XLSheet): Number of columns.\n\nSee also: xl_rowtable, xl_columntable, xl_print.\n\nExamples\n\njulia> xlsx = xl_parse(xl_sample_stock_xlsx())\n1-element XLWorkbook:\n 41x6 XLSheet(\"Stock\")\n\njulia> sheet = xlsx[\"Stock\"]\n41x6 XLSheet(\"Stock\")\n Sheet │ A       B         C      D           E                 F                 \n───────┼─────────────────────────────────────────────────────────────────────────\n     1 │ \"name\"  \"price\"   \"h24\"  \"volume\"    \"mkt\"             \"sector\"          \n     2 │ \"MSFT\"  430.16    0.00   11,855,456  3,197,000,000,0…  \"Technology Ser…  \n     3 │ \"AAPL\"  189.98    -0.00  36,327,000  2,913,000,000,0…  \"Electronic Tec…  \n     4 │ \"NVDA\"  1,064.69  0.00   42,948,000  2,662,000,000,0…  \"Electronic Tec…  \n     ⋮ │ ⋮       ⋮         ⋮      ⋮           ⋮                 ⋮                 \n    40 │ \"JNJ\"   146.97    0.00   7,173,000   353,710,000,000   \"Health Technol…  \n    41 │ \"ORCL\"  122.91    -0.00  5,984,000   337,820,000,000   \"Technology Ser… \n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#OpenXL.SubXLSheet","page":"API Reference","title":"OpenXL.SubXLSheet","text":"SubXLSheet <: AbstractXLSheet\n\nSlice view of the XLSheet object. Supports the same operations as XLSheet.\n\nFields\n\ndata::Matrix: Table data.\n\nAccessors\n\nparent(x::SubXLSheet): Parent sheet.\nxl_nrow(x::SubXLSheet): Number of rows.\nxl_ncol(x::SubXLSheet): Number of columns.\n\nSee also: xl_rowtable, xl_columntable, xl_print.\n\nExamples\n\njulia> xlsx = xl_parse(xl_sample_stock_xlsx())\n1-element XLWorkbook:\n 41x6 XLSheet(\"Stock\")\n\njulia> xlsx[\"Stock\"][\"A1:D25\"]\n25x4 SubXLSheet(\"Stock\")\n Sheet │ A       B         C      D           \n───────┼─────────────────────────────────────\n     1 │ \"name\"  \"price\"   \"h24\"  \"volume\"    \n     2 │ \"MSFT\"  430.16    0.00   11,855,456  \n     3 │ \"AAPL\"  189.98    -0.00  36,327,000  \n     4 │ \"NVDA\"  1,064.69  0.00   42,948,000  \n     ⋮ │ ⋮       ⋮         ⋮      ⋮           \n    24 │ \"NVDA\"  1,064.69  0.00   42,948,000  \n    25 │ \"GOOG\"  176.33    -0.00  11,404,000 \n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#OpenXL.AbstractXLCell","page":"API Reference","title":"OpenXL.AbstractXLCell","text":"AbstractXLCell\n\nAbstract supertype for table cells.\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#OpenXL.XLCell","page":"API Reference","title":"OpenXL.XLCell","text":"XLCell{T} <: AbstractXLCell\n\nA table cell containing a value and information about its formatting.\n\nnote: Note\nTo extract the value of a cell, the empty index operator ([]) can be used.\n\nFields\n\nvalue::T: Cell value.\nformat::Int: Number format id (see Number Format).\n\n\n\n\n\n","category":"type"},{"location":"pages/api_reference/#Methods","page":"API Reference","title":"Methods","text":"","category":"section"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"xl_rowtable\nxl_columntable\neachrow\nxl_print","category":"page"},{"location":"pages/api_reference/#OpenXL.xl_rowtable","page":"API Reference","title":"OpenXL.xl_rowtable","text":"xl_rowtable(sheet::AbstractXLSheet; kw...) -> Vector{NamedTuple}\n\nConverts sheet rows to a Vector of NamedTuples.\n\nKeyword arguments\n\nalt_keys: Alternative custom column headers (Dict{String,String} or Vector{String}).\nheader::Bool = false: Use first row elements as column headers.\n\nExamples\n\njulia> xlsx = xl_parse(xl_sample_stock_xlsx())\n1-element XLWorkbook:\n 41x6 XLSheet(\"Stock\")\n\njulia> xl_rowtable(xlsx[\"Stock\"][\"A1:C30\"], header = true)\n29-element Vector{NamedTuple{(:name, :price, :h24)}}:\n (name = \"MSFT\", price = 430.16, h24 = 0.0007)\n (name = \"AAPL\", price = 189.98, h24 = -0.0005)\n (name = \"NVDA\", price = 1064.69, h24 = 0.0045)\n (name = \"GOOG\", price = 176.33, h24 = -0.0006)\n ⋮\n (name = \"LLY\", price = 807.43, h24 = -0.0024)\n (name = \"AVGO\", price = 1407.84, h24 = 0.0036)\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#OpenXL.xl_columntable","page":"API Reference","title":"OpenXL.xl_columntable","text":"xl_columntable(sheet::AbstractXLSheet; kw...) -> Vector{NamedTuple}\n\nConverts sheet columns to a Vector of NamedTuples.\n\nKeyword arguments\n\nalt_keys: Alternative custom column headers (Dict{String,String} or Vector{String}).\nheader::Bool = false: Use first row elements as column headers.\n\nExamples\n\njulia> xlsx = xl_parse(xl_sample_stock_xlsx())\n1-element XLWorkbook:\n 41x6 XLSheet(\"Stock\")\n\njulia> alt_keys = Dict(\"A\" => \"Name\", \"B\" => \"Price\", \"C\" => \"H24\");\n\njulia> xl_columntable(xlsx[\"Stock\"][2:end, 1:3]; alt_keys)\n(\n    Name = Any[\"MSFT\", \"AAPL\"  …  \"JNJ\", \"ORCL\"],\n    Price = Any[430.16, 189.98  …  146.97, 122.91],\n    H24 = Any[0.0007, -0.0005  …  0.0007, -0.0003],\n)\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Base.eachrow","page":"API Reference","title":"Base.eachrow","text":"eachrow(x::AbstractXLSheet; kw...)\n\nCreates a table row iterator. Row slices are returned as NamedTuple.\n\nKeyword arguments\n\nalt_keys: Alternative custom column headers (Dict{String,String} or Vector{String}).\nheader::Bool = false: Use first row elements as column headers.\n\nExamples\n\njulia> xlsx = xl_parse(xl_sample_stock_xlsx())\n1-element XLWorkbook:\n 41x6 XLSheet(\"Stock\")\n\njulia for row in eachrow(xlsx[\"Stock\"]; header = true)\n          println(row)\n      end\n(name = \"MSFT\", price = 430.16, h24 = 0.0007, volume = 1.1855456e7, ...)\n(name = \"AAPL\", price = 189.98, h24 = -0.0005, volume = 3.6327e7, ...)\n(name = \"NVDA\", price = 1064.69, h24 = 0.0045, volume = 4.2948e7, ...)\n(name = \"GOOG\", price = 176.33, h24 = -0.0006, volume = 1.1404e7, ...)\n ⋮\n(name = \"JNJ\", price = 146.97, h24 = 0.0007, volume = 7.173e6, ...)\n(name = \"ORCL\", price = 122.91, h24 = -0.0003, volume = 5.984e6, ...)\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#OpenXL.xl_print","page":"API Reference","title":"OpenXL.xl_print","text":"xl_print([io::IO], sheet::AbstractXLSheet; kw...)\n\nPrint a sheet as a table representation.\n\nKeyword arguments\n\ntitle::AbstractString = \"Sheet\": Table title in upper left corner.\nheader::Bool = false: Use first row elements as column headers.\nmax_len::Int = 16: Maximum length of an element in a cell.\ncompact::Bool = true: Omit rows and columns to save space.\n\nExamples\n\njulia> xlsx = xl_parse(xl_sample_employee_xlsx())\n1-element XLWorkbook:\n 1001x13 XLSheet(\"Employee\")\n\njulia> xl_print(xlsx[\"Employee\"]; header = true)\n Sheet │ \"eeid\"    \"full_name\"       \"job_title\"       ⋯  \"country\"        \"city\"       \"exit_date\"  \n───────┼────────────────────────────────────────────────────────────────────────────────────────────\n     2 │ \"E02387\"  \"Emily Davis\"     \"Sr. Manger\"      ⋯  \"United States\"  \"Seattle\"    10-16-21     \n     3 │ \"E04105\"  \"Theodore Dinh\"   \"Technical Arch…  ⋯  \"China\"          \"Chongqing\"  *            \n     4 │ \"E02572\"  \"Luna Sanders\"    \"Director\"        ⋯  \"United States\"  \"Chicago\"    *            \n     5 │ \"E02832\"  \"Penelope Jorda…  \"Computer Syste…  ⋯  \"United States\"  \"Chicago\"    *            \n     ⋮ │ ⋮         ⋮                 ⋮                 ⋯  ⋮                ⋮            ⋮            \n  1000 │ \"E02521\"  \"Lily Nguyen\"     \"Sr. Analyst\"     ⋯  \"China\"          \"Chengdu\"    *            \n  1001 │ \"E03545\"  \"Sofia Cheng\"     \"Vice President\"  ⋯  \"United States\"  \"Miami\"      *            \n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#Utils","page":"API Reference","title":"Utils","text":"","category":"section"},{"location":"pages/api_reference/","page":"API Reference","title":"API Reference","text":"OpenXL.format_description\nOpenXL.index_to_column_letter\nOpenXL.column_letter_to_index","category":"page"},{"location":"pages/api_reference/#OpenXL.format_description","page":"API Reference","title":"OpenXL.format_description","text":"format_description(code::Int) -> String\n\nReturns a formatting description by its code (see Number Format).\n\njulia> format_description(0)\n\"General\"\n\njulia> format_description(3)\n\"#,##0\"\n\njulia> format_description(11)\n\"0.00E+00\"\n\njulia> format_description(19)\n\"h:mm:ss AM/PM\"\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#OpenXL.index_to_column_letter","page":"API Reference","title":"OpenXL.index_to_column_letter","text":"index_to_column_letter(inx::Int) -> String\n\nConverts a numerical index into its corresponding Excel column letter (\"A\", \"B\", ..., \"Z\", \"AA\", etc.).\n\nExamples\n\njulia> index_to_column_letter(1)\n\"A\"\n\njulia> index_to_column_letter(26)\n\"Z\"\n\njulia> index_to_column_letter(27)\n\"AA\"\n\n\n\n\n\n","category":"function"},{"location":"pages/api_reference/#OpenXL.column_letter_to_index","page":"API Reference","title":"OpenXL.column_letter_to_index","text":"column_letter_to_index(letter::AbstractString) -> Int\n\nConverts an Excel column letter (\"A\", \"B\", ..., \"Z\", \"AA\", etc.) to its corresponding numerical index.\n\nExamples\n\njulia> column_letter_to_index(\"A\")\n1\n\njulia> column_letter_to_index(\"Z\")\n26\n\njulia> column_letter_to_index(\"AA\")\n27\n\n\n\n\n\n","category":"function"}]
}
